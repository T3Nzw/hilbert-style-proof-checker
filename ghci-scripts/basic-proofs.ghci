:l ../src/Program/Axioms.hs ../src/Program/Formulae.hs ../src/Program/ProofStatement.hs ../src/Program/Rules.hs  ../src/Program/Theorem.hs ../src/Utils/Utils.hs

import Utils
import Program.Axioms
import Program.Formulae
import Program.ProofStatement
import Program.Rules
import Control.Monad.State
import qualified Data.Set as S
import qualified Data.Map as M
import Program.Theorem

-- proof of the K combinator using the axiom A -> B -> A

let f1 = Variable "X" :->: Variable "Y" :->: Variable "X"

let st1 = [f1 `By` AX K]

let p1 = evalState (proofcheck st1) (Context S.empty)


-- A ⊢ B -> A

let f21 = Variable "A"
let f22 = Variable "A" :->: Variable "B" :->: Variable "A"
let f23 = Variable "B" :->: Variable "A"

let st21 = [f21 `By` AS]
let st22 = [f22 `By` AX K]
let st23 = [f23 `By` MP]

let p2 = evalState (proofcheck (st21 ++ st22 ++ st23)) (Context (S.fromList [f21]))

-- not part of the proof
let st23p = proofcheck' (Context (S.fromList [f21, f22])) $ head st23


-- commutativity of conjunction; A ^ B ⊢ B ^ A

let f33 = Variable "A" :&: Variable "B"

let f31 = f33 :->: Variable "A"
let f32 = f33 :->: Variable "B"
-- f33 should've been here
let f34 = Variable "A"
let f35 = Variable "B"
-- I HAD ACCIDENTALLY WRITTEN B -> A INSTEAD OF B ^ A AND SPENT 30 MINS DEBUGGING THIS FUUUUUUUUUUUUUUUUUUUUUUUCk
let f36 = Variable "B" :->: Variable "A" :->: (Variable "B" :&: Variable "A")
let f37 = Variable "A" :->: (Variable "B" :&: Variable "A")
let f38 = Variable "B" :&: Variable "A"

let st31 = [f31 `By` AX (CONJ_ELIM Rhs)]
let st32 = [f32 `By` AX (CONJ_ELIM Lhs)]
let st33 = [f33 `By` AS]
let st34 = [f34 `By` MP]
let st35 = [f35 `By` MP]
let st36 = [f36 `By` AX CONJ_INTRO]
let st37 = [f37 `By` MP]
let st38 = [f38 `By` MP]

let st3 = st31 ++ st32 ++ st33 ++ st34 ++ st35 ++ st36 ++ st37 ++ st38

let p3 = evalState (proofcheck st3) (Context (S.fromList [f33]))


-- generalisation of a single formula - succeeds

let f4 = Variable "A"

let st41 = [f4 `By` AS]
let st42 = [Forall "x" f4 `By` GEN]

let p4 = evalState (proofcheck (st41 ++ st42)) (Context (S.fromList [f4]))


-- generalisation of a single formula - fails 

let f5 = Variable "x"

let st51 = [f5 `By` AS]
let st52 = [Forall "x" f5 `By` GEN]  -- x IS free in the context: {"x"}

let p5 = evalState (proofcheck (st51 ++ st52)) (Context (S.fromList [f5]))


-- more complex generalisation example - succeeds

let f6 = Forall "x" f5  -- \forall x. A

let st61 = [f6 `By` AS]
let st62 = [Forall "x" f6 `By` GEN]  -- x is NOT free in the context: {\forall "x". A}

let p6 = evalState (proofcheck (st61 ++ st62)) (Context (S.fromList [f6]))

-- identity; A -> A

-- 1. A -> A -> A ; AX K with A:=A, B:=A
-- 2. A -> (A -> A) -> A  ; AX K with A:=A, B:=A->A
-- 3. (A -> (A -> A) -> A) -> (A -> (A -> A)) -> A -> A  ; AX S with A:=A, B:=A->A, C:=A
-- 4. (A -> A -> A) -> A -> A  ; MP 3,2
-- 5. A -> A  ; MP 4,1

let f71 = Variable "A" :->: Variable "A" :->: Variable "A"
let f72 = Variable "A" :->: (Variable "A" :->: Variable "A") :->: Variable "A"
let f73 = f72 :->: f71 :->: Variable "A" :->: Variable "A"
let f74 = f71 :->: Variable "A" :->: Variable "A"
let f75 = Variable "A" :->: Variable "A"

let st71 = [f71 `By` AX K]
let st72 = [f72 `By` AX K]
let st73 = [f73 `By` AX S]
let st74 = [f74 `By` MP]
let st75 = [f75 `By` MP]

let pss7 = st71 ++ st72 ++ st73 ++ st74 ++ st75

let p7 = evalState (proofcheck pss7) (Context S.empty)

let goal = Goal $ Variable "A" :->: Variable "A"

let t7 = prove $ Theorem "identity" goal (Context S.empty) pss7
-- wrong goal! should return Left "goal not derived"
let t7fail = prove $ Theorem "identityFail" (Goal $ Variable "A") (Context S.empty) pss7

-- contradiction; !A -> A -> B  == (A -> btm) -> A -> B
-- assume !A == (A -> btm) (bc of deduction theorem)

-- 1. btm -> B  ; EX_FALSO
-- 2. A -> btm  ; AS
-- 3. (A -> btm -> B) -> (A -> btm) -> A -> B
-- 4. somehow derive A -> btm -> B ??

-- \forall x.A ⊢ \exists x.A

let a = Variable "A"
let suba = a `With` ("x" :~> Variable "t")

let f91 = Forall "x" a
let f92 = f91 :->: suba
let f93 = suba
let f94 = suba :->: (Exists "x" a)
let f95 = Exists "x" a

let st91 = [f91 `By` AS]
let st92 = [f92 `By` AX UNIV_WITNESS]
let st93 = [f93 `By` MP]
let st94 = [f94 `By` AX SUB_EXIST]
let st95 = [f95 `By` MP]

let pss9 = st91 ++ st92 ++ st93 ++ st94 ++ st95

let p9 = evalState (proofcheck pss9) (Context (S.fromList [f91]))

let t9 = runState (proofcheck pss9) (Context (S.fromList [f91]))


