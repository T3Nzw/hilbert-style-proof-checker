:l ../src/Program/Axioms.hs ../src/Program/Formulae.hs ../src/Program/ProofStatement.hs ../src/Program/Rules.hs  ../src/Program/Theorem.hs ../src/Utils/Utils.hs

import Utils
import Program.Axioms
import Program.Formulae
import Program.ProofStatement
import Program.Rules
import Control.Monad.State
import qualified Data.Set as S
import qualified Data.Map as M

-- proof of the K combinator using the axiom A -> B -> A

let f1 = Variable "X" :->: Variable "Y" :->: Variable "X"

let st1 = [f1 `By` AX K]

let p1 = evalState (proofcheck st1) (Context S.empty)


-- A ⊢ B -> A

let f21 = Variable "A"
let f22 = Variable "A" :->: Variable "B" :->: Variable "A"
let f23 = Variable "B" :->: Variable "A"

let st21 = [f21 `By` AS]
let st22 = [f22 `By` AX K]
let st23 = [f23 `By` MP]

let p2 = evalState (proofcheck (st21 ++ st22 ++ st23)) (Context (S.fromList [f21]))

-- not part of the proof
let st23p = proofcheck' (Context (S.fromList [f21, f22])) $ head st23


-- commutativity of conjunction; A ^ B ⊢ B ^ A

let f33 = Variable "A" :&: Variable "B"

let f31 = f33 :->: Variable "A"
let f32 = f33 :->: Variable "B"
-- f33 should've been here
let f34 = Variable "A"
let f35 = Variable "B"
-- I HAD ACCIDENTALLY WRITTEN B -> A INSTEAD OF B ^ A AND SPENT 30 MINS DEBUGGING THIS FUUUUUUUUUUUUUUUUUUUUUUUCk
let f36 = Variable "B" :->: Variable "A" :->: (Variable "B" :&: Variable "A")
let f37 = Variable "A" :->: (Variable "B" :&: Variable "A")
let f38 = Variable "B" :&: Variable "A"

let st31 = [f31 `By` AX (CONJ_ELIM Rhs)]
let st32 = [f32 `By` AX (CONJ_ELIM Lhs)]
let st33 = [f33 `By` AS]
let st34 = [f34 `By` MP]
let st35 = [f35 `By` MP]
let st36 = [f36 `By` AX CONJ_INTRO]
let st37 = [f37 `By` MP]
let st38 = [f38 `By` MP]

let st3 = st31 ++ st32 ++ st33 ++ st34 ++ st35 ++ st36 ++ st37 ++ st38

let p3 = evalState (proofcheck st3) (Context (S.fromList [f33]))


-- generalisation of a single formula - succeeds

let f4 = Variable "A"

let st41 = [f4 `By` AS]
let st42 = [Forall "x" f4 `By` GEN]

let p4 = evalState (proofcheck (st41 ++ st42)) (Context (S.fromList [f4]))


-- generalisation of a single formula - fails 

let f5 = Variable "x"

let st51 = [f5 `By` AS]
let st52 = [Forall "x" f5 `By` GEN]  -- x IS free in the context: {"x"}

let p5 = evalState (proofcheck (st51 ++ st52)) (Context (S.fromList [f5]))


-- more complex generalisation example - succeeds

let f6 = Forall "x" f5  -- \forall x. A

let st61 = [f6 `By` AS]
let st62 = [Forall "x" f6 `By` GEN]  -- x is NOT free in the context: {\forall "x". A}

let p6 = evalState (proofcheck (st61 ++ st62)) (Context (S.fromList [f6]))


